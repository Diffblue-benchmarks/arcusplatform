/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This contains multi-instance capability specification
 */
driver 'MultiInstanceStrings'
version '1.0'
vendor 'Iris'
model 'TestCase'
deviceTypeHint 'TestCase'
matcher vendor: ~/.*/

instance 'plug1', Switch, DevicePower
instance 'plug2', Switch, DevicePower
instance 'lock', DoorLock

configure(
   'devpow:source:plug1': 'line',
   'devpow:linecapable:plug1': true,
   'devpow:source:plug2': 'battery',
   'devpow:linecapable:plug2': false,
   'doorlock:type:lock': 'deadbolt'
)

setAttributes('swit') {
   for(attribute in message.attributes) {
      switch(attribute.key) {
      case 'swit': // won't match on a string lookup
         break;
      case 'swit:state': // won't match on an instance
         break;
      case 'swit:state:plug1':
         vars.plug1 = attribute.value;
         break;
      case 'swit:state:plug2':
         vars.state = attribute.value; // use state to match the other test case
         break;
      }
   }
   attributes << message.attributes;
}

onPlatform('doorlock:AuthorizePerson:lock') {
   vars.handledBy = 'doorlock:AuthorizePerson:lock';
   sendResponse "EmptyMessage", [:]
}

onPlatform('doorlock:DeauthorizePerson') {
   vars.handledBy = 'doorlock:DeauthorizePerson';
   sendResponse "EmptyMessage", [:]
}

