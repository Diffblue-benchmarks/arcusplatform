{{#file . "com/iris/client/capability/{{name}}.java"}}
package com.iris.client.capability;

public interface {{name}} extends {{#if enhances}}{{enhances}}{{else}}Capability{{/if}} {
   public static final String NAMESPACE = "{{namespace}}";
   public static final String NAME = "{{name}}";

{{> client/attributes attributes}}
   
   {{#methods}}
   /** {{description}} */
   public static final String CMD_{{toUpperCase name}} = "{{namespace}}:{{name}}";
   {{/methods}}

   {{#attributes}}
   @com.iris.client.annotation.GetAttribute("{{namespace}}:{{name}}")
   public {{{javaTypeOf type}}} get{{capitalize name}}();
   {{#if writable}}
   @com.iris.client.annotation.SetAttribute("{{namespace}}:{{name}}")
   public void set{{capitalize name}}({{{javaTypeOf type}}} {{name}});
   {{/if}}
   {{/attributes}} 
   
   {{#methods}}
   /** {{description}} */
   {{#if restful }}@com.iris.client.annotation.RESTful{{/if}}
   @com.iris.client.annotation.Command(value="{{namespace}}:{{name}}", parameters={ {{#parameters}}"{{name}}"{{#unless @last}}, {{/unless}}{{/parameters}} })
   public com.iris.client.event.ClientFuture<{{name}}Response> {{uncapitalize name}}(
         {{#parameters}}{{{javaTypeOf type}}} {{name}}{{#unless @last}}, {{/unless}}{{/parameters}}
   );
   {{/methods}}   

   {{#methods}}
   /** {{description}} */
{{> client/ClientRequest}}
   
{{> client/ClientResponse}}
   {{/methods}}
   
   {{#events}}
{{> client/ClientEvent}}
   {{/events}}

   public static final com.iris.capability.definition.CapabilityDefinition DEFINITION =
      com.iris.capability.definition.Definitions
         .capabilityBuilder()
         .withName("{{name}}")
         .withNamespace("{{namespace}}")
         .withDescription("{{description}}")
         .withVersion("{{version}}")
         {{#if enhances}}.enhances("{{enhances}}"){{/if}}
         {{#attributes}}
         .addAttribute(
            com.iris.capability.definition.Definitions
               .attributeBuilder()
               .withName("{{namespace}}:{{name}}")
               .withDescription("{{description}}")
               .withType("{{{type.representation}}}")
               {{#if writable}}.writable(){{/if}}
               {{#if optional}}.optional(){{/if}}
               {{#enumValues}}.addEnumValue("{{.}}")
               {{/enumValues}}
               .withMin("{{min}}")
               .withMax("{{max}}")
               .withUnit("{{unit}}")
               .build()
         ){{/attributes}}
         {{#methods}}
         .addMethod(
            com.iris.capability.definition.Definitions
               .methodBuilder()
               .withName("{{namespace}}:{{name}}")
               .withDescription("{{description}}")
               {{#if restful }}.isRestful(true){{/if}}
               {{#parameters}}
               .addParameter(
{{> client/parameterBuilder .}}
               ){{/parameters}}
               {{#returnValues}}
               .addReturnValue(
{{> client/parameterBuilder .}}
               ){{/returnValues}}
               {{#errors}}
               .addErrorCode(
{{> client/errorCodeBuilderBuilder .}}
               ){{/errors}}               
               .build()
         ){{/methods}}
         {{#events}}
         .addEvent(
            com.iris.capability.definition.Definitions
               .eventBuilder()
               .withName("{{namespace}}:{{name}}")
               .withDescription("{{description}}")
               {{#parameters}}
               .addParameter(
{{> client/parameterBuilder .}}
               ){{/parameters}}
               .build()
         ){{/events}}
         {{#methods}}
         .addEvent(
            com.iris.capability.definition.Definitions
               .eventBuilder()
               .withName("{{namespace}}:{{name}}Response")
               {{#returnValues}}
               .addParameter(
{{> client/parameterBuilder .}}
               ){{/returnValues}}
               .build()
         ){{/methods}}
         .build();
}
{{/file}}
