
message zwave.Meter.MeterGetV1<id="0x01", group="V1"> {
}

message zwave.Meter.MeterReportV1<id="0x02", group="V1"> {
    const u8 METER_TYPE_ELECTRIC_METER = 0x01;
    const u8 METER_TYPE_GAS_METER = 0x02;
    const u8 METER_TYPE_WATER_METER = 0x03;
    const u8 PROPERTIES1_SIZE_MASK = 0x07;
    const u8 PROPERTIES1_SIZE_SHIFT = 0;
    const u8 PROPERTIES1_SCALE_MASK = 0x18;
    const u8 PROPERTIES1_SCALE_SHIFT = 3;
    const u8 PROPERTIES1_PRECISION_MASK = 0xE0;
    const u8 PROPERTIES1_PRECISION_SHIFT = 5;
    u8 meterType;
    u8 properties1;
    u8[] meterValue;
}

message zwave.Meter.MeterGetV2<id="0x01", group="V2"> {
    const u8 PROPERTIES1_SCALE_MASK = 0x18;
    const u8 PROPERTIES1_SCALE_SHIFT = 3;
    u8 properties1;
}

message zwave.Meter.MeterReportV2<id="0x02", group="V2"> {
    const u8 PROPERTIES1_METER_TYPE_MASK = 0x1F;
    const u8 PROPERTIES1_METER_TYPE_SHIFT = 0;
    const u8 PROPERTIES1_RATE_TYPE_MASK = 0x60;
    const u8 PROPERTIES1_RATE_TYPE_SHIFT = 5;
    const u8 PROPERTIES2_SIZE_MASK = 0x07;
    const u8 PROPERTIES2_SIZE_SHIFT = 0;
    const u8 PROPERTIES2_SCALE_MASK = 0x18;
    const u8 PROPERTIES2_SCALE_SHIFT = 3;
    const u8 PROPERTIES2_PRECISION_MASK = 0xE0;
    const u8 PROPERTIES2_PRECISION_SHIFT = 5;
    u8 properties1;
    u8 properties2;
    u8[] meterValue;
    // deltaTime contained in previous field
    // previousMeterValue contained in previous field
}

message zwave.Meter.MeterResetV2<id="0x05", group="V2"> {
}

message zwave.Meter.MeterSupportedGetV2<id="0x03", group="V2"> {
}

message zwave.Meter.MeterSupportedReportV2<id="0x04", group="V2"> {
    const u8 PROPERTIES1_METER_TYPE_MASK = 0x1F;
    const u8 PROPERTIES1_METER_TYPE_SHIFT = 0;
    const u8 PROPERTIES1_METER_RESET = 0x80;
    const u8 PROPERTIES2_SCALE_SUPPORTED_MASK = 0x0F;
    const u8 PROPERTIES2_SCALE_SUPPORTED_SHIFT = 0;
    u8 properties1;
    u8 properties2;
}

message zwave.Meter.MeterGetV3<id="0x01", group="V3"> {
    const u8 PROPERTIES1_SCALE_MASK = 0x38;
    const u8 PROPERTIES1_SCALE_SHIFT = 3;
    u8 properties1;
}

message zwave.Meter.MeterReportV3<id="0x02", group="V3"> {
    const u8 PROPERTIES1_METER_TYPE_MASK = 0x1F;
    const u8 PROPERTIES1_METER_TYPE_SHIFT = 0;
    const u8 PROPERTIES1_RATE_TYPE_MASK = 0x60;
    const u8 PROPERTIES1_RATE_TYPE_SHIFT = 5;
    const u8 PROPERTIES1_SCALE2 = 0x80;
    const u8 PROPERTIES2_SIZE_MASK = 0x07;
    const u8 PROPERTIES2_SIZE_SHIFT = 0;
    const u8 PROPERTIES2_SCALE_MASK = 0x18;
    const u8 PROPERTIES2_SCALE_SHIFT = 3;
    const u8 PROPERTIES2_PRECISION_MASK = 0xE0;
    const u8 PROPERTIES2_PRECISION_SHIFT = 5;
    u8 properties1;
    u8 properties2;
    u8[] meterValue;
    // deltaTime contained in previous field
    // previousMeterValue contained in previous field
}

message zwave.Meter.MeterResetV3<id="0x05", group="V3"> {
}

message zwave.Meter.MeterSupportedGetV3<id="0x03", group="V3"> {
}

message zwave.Meter.MeterSupportedReportV3<id="0x04", group="V3"> {
    const u8 PROPERTIES1_METER_TYPE_MASK = 0x1F;
    const u8 PROPERTIES1_METER_TYPE_SHIFT = 0;
    const u8 PROPERTIES1_METER_RESET = 0x80;
    u8 properties1;
    u8 scaleSupported;
}

message zwave.Meter.MeterGetV4<id="0x01", group="V4"> {
    const u8 PROPERTIES1_SCALE_MASK = 0x38;
    const u8 PROPERTIES1_SCALE_SHIFT = 3;
    const u8 PROPERTIES1_RATE_TYPE_MASK = 0xC0;
    const u8 PROPERTIES1_RATE_TYPE_SHIFT = 6;
    u8 properties1;
    u8 scale2;
}

message zwave.Meter.MeterReportV4<id="0x02", group="V4"> {
    const u8 PROPERTIES1_METER_TYPE_MASK = 0x1F;
    const u8 PROPERTIES1_METER_TYPE_SHIFT = 0;
    const u8 PROPERTIES1_RATE_TYPE_MASK = 0x60;
    const u8 PROPERTIES1_RATE_TYPE_SHIFT = 5;
    const u8 PROPERTIES1_SCALE2 = 0x80;
    const u8 PROPERTIES2_SIZE_MASK = 0x07;
    const u8 PROPERTIES2_SIZE_SHIFT = 0;
    const u8 PROPERTIES2_SCALE10_MASK = 0x18;
    const u8 PROPERTIES2_SCALE10_SHIFT = 3;
    const u8 PROPERTIES2_PRECISION_MASK = 0xE0;
    const u8 PROPERTIES2_PRECISION_SHIFT = 5;
    u8 properties1;
    u8 properties2;
    u8[] meterValue;
    // deltaTime contained in previous field
    // previousMeterValue contained in previous field
    // scale2 contained in previous field
}

message zwave.Meter.MeterResetV4<id="0x05", group="V4"> {
}

message zwave.Meter.MeterSupportedGetV4<id="0x03", group="V4"> {
}

message zwave.Meter.MeterSupportedReportV4<id="0x04", group="V4"> {
    const u8 PROPERTIES1_METER_TYPE_MASK = 0x1F;
    const u8 PROPERTIES1_METER_TYPE_SHIFT = 0;
    const u8 PROPERTIES1_RATE_TYPE_MASK = 0x60;
    const u8 PROPERTIES1_RATE_TYPE_SHIFT = 5;
    const u8 PROPERTIES1_METER_RESET = 0x80;
    const u8 PROPERTIES2_SCALE_SUPPORTED_0_MASK = 0x7F;
    const u8 PROPERTIES2_SCALE_SUPPORTED_0_SHIFT = 0;
    const u8 PROPERTIES2_M_S_T = 0x80;
    u8 properties1;
    u8 properties2;
    u8 numberOfScaleSupportedBytesToFollow;
    u8[] scaleSupported;
}
