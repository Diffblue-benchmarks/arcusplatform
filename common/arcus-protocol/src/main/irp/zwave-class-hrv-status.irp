
message zwave.HrvStatus.HrvStatusGetV1<id="0x01", group="V1"> {
    const u8 STATUS_PARAMETER_OUTDOOR_AIR_TEMPERATURE = 0x00;
    const u8 STATUS_PARAMETER_SUPPLY_AIR_TEMPERATURE = 0x01;
    const u8 STATUS_PARAMETER_EXHAUST_AIR_TEMPERATURE = 0x02;
    const u8 STATUS_PARAMETER_DISCHARGE_AIR_TEMPERATURE = 0x03;
    const u8 STATUS_PARAMETER_ROOM_TEMPERATURE = 0x04;
    const u8 STATUS_PARAMETER_RELATIVE_HUMIDITY_IN_ROOM = 0x05;
    const u8 STATUS_PARAMETER_REMAINING_FILTER_LIFE = 0x06;
    u8 statusParameter;
}

message zwave.HrvStatus.HrvStatusReportV1<id="0x02", group="V1"> {
    const u8 STATUS_PARAMETER_OUTDOOR_AIR_TEMPERATURE = 0x00;
    const u8 STATUS_PARAMETER_SUPPLY_AIR_TEMPERATURE = 0x01;
    const u8 STATUS_PARAMETER_EXHAUST_AIR_TEMPERATURE = 0x02;
    const u8 STATUS_PARAMETER_DISCHARGE_AIR_TEMPERATURE = 0x03;
    const u8 STATUS_PARAMETER_ROOM_TEMPERATURE = 0x04;
    const u8 STATUS_PARAMETER_RELATIVE_HUMIDITY_IN_ROOM = 0x05;
    const u8 STATUS_PARAMETER_REMAINING_FILTER_LIFE = 0x06;
    const u8 PROPERTIES1_SIZE_MASK = 0x07;
    const u8 PROPERTIES1_SIZE_SHIFT = 0;
    const u8 PROPERTIES1_SCALE_MASK = 0x18;
    const u8 PROPERTIES1_SCALE_SHIFT = 3;
    const u8 PROPERTIES1_PRECISION_MASK = 0xE0;
    const u8 PROPERTIES1_PRECISION_SHIFT = 5;
    u8 statusParameter;
    u8 properties1;
    u8[] val;
}

message zwave.HrvStatus.HrvStatusSupportedGetV1<id="0x03", group="V1"> {
}

message zwave.HrvStatus.HrvStatusSupportedReportV1<id="0x04", group="V1"> {
    const u8 BIT_MASK_OUTDOOR_AIR_TEMPERATURE = 0x00;
    const u8 BIT_MASK_SUPPLY_AIR_TEMPERATURE = 0x01;
    const u8 BIT_MASK_EXHAUST_AIR_TEMPERATURE = 0x02;
    const u8 BIT_MASK_DISCHARGE_AIR_TEMPERATURE = 0x03;
    const u8 BIT_MASK_ROOM_TEMPERATURE = 0x04;
    const u8 BIT_MASK_RELATIVE_HUMIDITY_IN_ROOM = 0x05;
    const u8 BIT_MASK_REMAINING_FILTER_LIFE = 0x06;
    u8 bitMask;
}
